# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

name: build-and-push
run-name: Create a build-env container and push to docker hub

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Tag, branch or SHA to checkout"
        required: true
        type: string
        default: "main"
      image_prefix:
        description: "Prefix to use for destination image name"
        required: false
        type: string
        default: "opentelemetry-network-"
      additional_tag:
        description: "Additional tag to use when pushing to docker repository"
        required: false
        type: string
      dry_run:
        description: "Build everything but don't actually push to repository"
        required: false
        type: boolean
        default: false

permissions:
  contents: read

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: docker.io
  DOCKER_NAMESPACE: otel
  IMAGE_PREFIX: ${{ inputs.image_prefix }}

jobs:
  build-and-release:
    name: Build and release
    runs-on:
      labels: otel-linux-latest-4-cores
    steps:
      - name: Log-in to container registry
        run: |
          docker login --username="$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY <<< "$DOCKER_PASSWORD"
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          submodules: recursive
          path: src
      - name: Compute version numbers
        run: |
          # sets environment variables for use in later steps.
          # see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable

          cd $GITHUB_WORKSPACE/src

          git_short_hash=$(git rev-parse --short=8 HEAD)

          echo "git_short_hash=${git_short_hash}" >> "$GITHUB_ENV"
      - name: Output build information
        run: |
          echo "github.workspace = ${{ github.workspace }}"
          echo "github.ref = ${{ github.ref }}"
          echo "inputs.image_prefix = ${{ inputs.image_prefix }}"
          echo "inputs.dry_run = ${{ inputs.dry_run }}"
          echo "git_short_hash = ${git_short_hash}"
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
      - name: Build build-env container
        run: |
          cd $GITHUB_WORKSPACE/src
          ./build.sh
      - name: Push to container registry
        run: |
          cd $GITHUB_WORKSPACE/src

          tags=(
            latest
            git-${git_short_hash}
          )

          if [[ "${{ inputs.additional_tag }}" != "" ]]; then
            tags=(${tags[@]} "${{ inputs.additional_tag }}")
          fi

          # strip potential "https://" prefix and trailing slashes from docker registry
          docker_registry=$(sed -e 's,^https://,,' -e 's,/*$,,' <<< $DOCKER_REGISTRY)

          image="build-env"
          image_name="${IMAGE_PREFIX}build-tools"
          image_path="${docker_registry}/${DOCKER_NAMESPACE}/${image_name}"

          for tag in ${tags[@]}; do
            docker tag $image ${image_path}:${tag}
            if [[ "${{ inputs.dry_run }}" == "false" ]]; then
              docker push ${image_path}:${tag}
            fi
          done

          docker images --no-trunc
